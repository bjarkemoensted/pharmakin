import numpy as np

from pharmakin.utils.units import has_units


def test_all_parameters_defined(master_formulary, all_parameters):
    """Checks that for each parameter, at least one formula containing the parameter has been defined"""
    
    missing = []
    for par in all_parameters:
        if len(master_formulary.get_formulas_containing_parameter(par)) == 0:
            missing.append(par)
        #
    assert not missing


def test_computations(master_formulary, parameter_names_with_example_vals):
    """Uses example values for parameters to check that formulas work with and without units"""
    for formula in master_formulary.formulae:
        for d in parameter_names_with_example_vals:
            kws = {parname: d[parname] for parname in formula.inputs}
            res = formula(**kws)
            assert formula.result_class.is_valid(res)
            assert not has_units(res)
            
            kws_with_units = {k: master_formulary.parameters[k].ensure_units(v) for k, v in kws.items()}
            res_with_units = formula(**kws_with_units)
            assert formula.result_class.is_valid(res_with_units)
        #
    #


def test_determine_parameter(master_formulary, example_calculations_from_formulas):
    """Tests that the formulary correctly recovers parameter values determined by its formulas"""
    for use_units in (False, True):
        fun = "ensure_units" if use_units else "ensure_float"
        for d in example_calculations_from_formulas:
            d = {par: getattr(par, fun)(val) for par, val in d.items()}
            
            # d holds a collection of parameter-values generated by a formula. Check that all can be determined
            for par, val in d.items():
                # For each parameter, determine it based on the remaining n-1 parameters
                other_kwds = {p.__name__: v for p, v in d.items() if p != par}
                computed = master_formulary.determine_parameter(par, **other_kwds)
                # Check that the result is correct
                assert np.isclose(computed, val)
            #
        #
    #
